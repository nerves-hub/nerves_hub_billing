defaults: &defaults
  docker:
    - image: nerveshub/docker-build:alpine-3.8
  working_directory: ~/repo

remote_docker: &remote_docker
  setup_remote_docker:
    version: 17.09.0-ce

docker_env: &docker_env
  run:
    name: Set docker env
    command: |
      if [ -z "$CIRCLE_TAG" ]; then
      BRANCH=$(git rev-parse --abbrev-ref HEAD)
        SHA=$(git rev-parse --short HEAD)
        TAG=$(echo "v.$BRANCH.$SHA" | sed 's/\//_/g')
      else
        TAG=$CIRCLE_TAG
      fi
      echo "export DOCKER_TAG=$TAG" >> $BASH_ENV
      echo "export DOCKER_IMAGE=nerveshub/$CIRCLE_PROJECT_REPONAME" >> $BASH_ENV

docker_build_test: &docker_build_test
  run:
    name: Build docker image
    command: |
      docker build \
        -t $DOCKER_IMAGE:$DOCKER_TAG .

docker_build_release: &docker_build_release
  run:
    name: Build docker image
    command: |
      docker build \
        -t $DOCKER_IMAGE:$DOCKER_TAG \
        -t $DOCKER_IMAGE:latest \
        -f rel/Dockerfile.build .

docker_run_test: &docker_run_test
  run:
    name: Run the tests
    command: |
      docker run \
        $DOCKER_IMAGE:$DOCKER_TAG \
        mix test

docker_check_formatting: &docker_check_formatting
  run:
    name: Check formatting
    command: |
      docker run \
        $DOCKER_IMAGE:$DOCKER_TAG \
        mix format --check-formatted

docker_save: &docker_save
  run:
    name: Save docker images
    command: |
      mkdir -p /docker
      docker save \
        nerveshub/$APP_NAME:$DOCKER_TAG \
        -o /docker/$APP_NAME-$DOCKER_TAG.tar
      docker save \
        nerveshub/$APP_NAME:latest \
        -o /docker/$APP_NAME-latest.tar

docker_import: &docker_import
  run:
    name: Import docker images
    command: |
      docker load \
        -i /docker/$APP_NAME-$DOCKER_TAG.tar
      docker load \
        -i /docker/$APP_NAME-latest.tar

migrate: &migrate
  run:
    name: Run Migrations
    command: |
      NERVES_HUB_BILLING_TASK=$(rel/scripts/ecs-update-task.sh $TASK nerveshub/nerves_hub_billing:$DOCKER_TAG)
      rel/scripts/ecs-migrate.sh \
        $VPC \
        $CLUSTER \
        $NERVES_HUB_BILLING_TASK \
        $TASK_SG


deploy: &deploy
  run:
    name: Deploy to production
    command: |
      rel/scripts/ecs-deploy.sh \
        $CLUSTER \
        nerves-hub-billing \
        nerveshub/nerves_hub_billing:$DOCKER_TAG

send_notifications: &send_notifications
  run:
    name: Send notifications
    command: |
      rel/scripts/slack-notification.sh \
        $SLACK_INCOMING_WEBHOOK_URL \
        "#nerves-hub" \
        "NervesHub Deployment" "Deployed: $CLUSTER:\`$DOCKER_IMAGE:$DOCKER_TAG\`"

version: 2
jobs:
  test:
    docker:
      - image: circleci/elixir:1.9
        environment:
          MIX_ENV: test
          DATABASE_URL: postgres://db:db@localhost:5432/db
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: db
          POSTGRES_PASSWORD: db
          POSTGRES_DB: db
    working_directory: ~/app
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix do deps.get, compile
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run: mix test
      - run:
          name: Verify formatting
          command: mix format --check-formatted

  build:
    <<: *defaults
    environment:
      MIX_ENV: prod
    steps:
      - checkout
      - <<: *remote_docker
      - run: echo "export APP_NAME=nerves_hub_billing" >> $BASH_ENV
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_save
      - save_cache:
          key: docker-{{ .Branch }}-{{ .Revision }}
          paths: "/docker"

  push_production:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_billing" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - run:
          name: Push docker image to dockerhub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push \
              $DOCKER_IMAGE:$DOCKER_TAG
            docker push \
              $DOCKER_IMAGE:latest

  push_staging:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_billing" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - run:
          name: Push docker image to dockerhub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push \
              $DOCKER_IMAGE:$DOCKER_TAG

  migrate_staging:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_billing" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub-staging" >> $BASH_ENV
      - run: echo "export TASK=nerves-hub-staging-billing" >> $BASH_ENV
      - run: echo "export TASK_SG=nerves-hub-staging-billing-sg" >> $BASH_ENV
      - run: echo "export VPC=nerves-hub-staging" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name migrate_staging
      - <<: *migrate

  migrate_production:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_billing" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub" >> $BASH_ENV
      - run: echo "export TASK=nerves_hub_billing" >> $BASH_ENV
      - run: echo "export TASK_SG=nerves-hub-billing-sg" >> $BASH_ENV
      - run: echo "export VPC=nerves-hub" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name migrate_production
      - <<: *migrate

  deploy_staging:
    <<: *defaults
    steps:
      - checkout
      - <<: *remote_docker
      - run: echo "export APP_NAME=nerves_hub_billing" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub-staging" >> $BASH_ENV
      - run: echo "export TASK=nerves-hub-staging-billing" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy_staging
      - <<: *deploy
      - <<: *send_notifications

  deploy_production:
    <<: *defaults
    steps:
      - checkout
      - <<: *remote_docker
      - run: echo "export APP_NAME=nerves_hub_billing" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub" >> $BASH_ENV
      - run: echo "export TASK=nerves_hub_billing" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy_production
      - <<: *deploy
      - <<: *send_notifications

workflows:
  version: 2
  pipeline:
      jobs:
        - test
        - build:
            context: org-global
            requires:
              - test
        - approve-deploy-staging:
            type: approval
            requires:
              - build
        - approve-deploy-production:
            type: approval
            requires:
              - build
            filters:
              branches:
                only: master
        - push_staging:
            context: org-global
            requires:
              - approve-deploy-staging
        - push_production:
            context: org-global
            requires:
              - approve-deploy-production
            filters:
              branches:
                only: master
        - migrate_staging:
            context: org-global
            requires:
              - push_staging
        - migrate_production:
            context: org-global
            requires:
              - push_production
            filters:
              branches:
                only: master
        - deploy_staging:
            context: org-global
            requires:
              - migrate_staging
        - deploy_production:
            context: org-global
            requires:
              - migrate_production
            filters:
              branches:
                only: master
